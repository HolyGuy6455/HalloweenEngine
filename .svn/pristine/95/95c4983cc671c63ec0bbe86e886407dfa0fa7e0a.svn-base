package com.gmail.sungmin0511a.drawAbles;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.EventListener;

import com.gmail.sungmin0511a.etc.MouseType;

/**
 * 화면에 표시될 수 있는 모든것의 상위객체입니다. 기본적으로 자신이 위치한 좌표를 가지고 있으며,
 * draw(Graphics)매서드로 화면에 그려질 수 있습니다.
 * @author HP
 */
public abstract class Child implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 5551784747275550378L;

	public static boolean overLap(Child child1, Child child2) {
		if (child1.contains(child2) || child2.contains(child1))
			return true;
		else
			return false;
	}

	protected int depth;
	protected ArrayList<EventListener> eventListeners;

	Point location;
	protected Container root;
	private boolean mouseOn;

	public Child(Point location) {
		super();
		this.location = location;
		root = null;
		eventListeners = new ArrayList<EventListener>();
		depth = 0;
		mouseOn = false;
	}
	
	public void addEventListener(EventListener eventListener) {
		eventListeners.add(eventListener);
	}

	/**
	 * 이 Child와 주어진 Child가 겹치는지에 대해 확인합니다. 대개 이 Child의 특정한 몇
	 * 좌표가 주어진 Child에 겹치는지만 확인합니다.
	 * @param child
	 *        이 Child와 겹치는지 확인 할 Child입니다.
	 * @return 만약 두 Child가 겹친다고 판단되면 true를 반환하고, 아니면 false를
	 *         반환합니다.
	 */
	abstract public boolean contains(Child child);
	
	/**
	 * 해당 좌표가 이 Child와 겹치는지 확인합니다. 만약 Child가 그려지는 범위 내에 주어진
	 * 좌표가 있다면 참값을 반환할 것입니다.
	 * @param x
	 *        x좌표입니다.
	 * @param y
	 *        y좌표입니다.
	 * @return 주어진 좌표가 이 Child와 겹친다면, true를 반환하고 아니라면 false를
	 *         반환합니다.
	 */
	public boolean contains(double x, double y) {
		return contains(new Point((int) x, (int) y));
	}
	
	/**
	 * 해당 좌표가 이 Child와 겹치는지 확인합니다. 만약 Child가 그려지는 범위 내에 주어진
	 * 좌표가 있다면 참값을 반환할 것입니다.
	 * @param x
	 *        x좌표입니다.
	 * @param y
	 *        y좌표입니다.
	 * @return 주어진 좌표가 이 Child와 겹친다면, true를 반환하고 아니라면 false를
	 *         반환합니다.
	 */
	public boolean contains(int x, int y) {
		return contains(new Point(x, y));
	}
	
	/**
	 * 해당 좌표가 이 Child와 겹치는지 확인합니다. 만약 Child가 그려지는 범위 내에 주어진
	 * 좌표가 있다면 참값을 반환할 것입니다.
	 * @param point
	 *        이 Child와 겹치는지 확인할 좌표의 Point입니다.
	 * @return 주어진 좌표가 이 Child와 겹친다면, true를 반환하고 아니라면 false를
	 *         반환합니다.
	 */
	abstract public boolean contains(Point point);
	
	/**
	 * Graphics에 이 Child를 그립니다.
	 * @param g
	 *        이 Child가 그려질 Graphic객체입니다.
	 */
	public abstract void draw(Graphics g);
	
	/**
	 * 현재 이 Child가 위치한 좌표를 반환합니다. 반환된 Point의 x,y값을 조절하면 이
	 * Child의 좌표도 변경됩니다.
	 * @return 이 Child가 위치한 좌표입니다.
	 */
	public Point getLocation() {
		return location;
	}
	
	/**
	 * 이 Child를 포함하고 있는 Container를 반환합니다.
	 * @return 이 Child를 포함하고 있는 Container입니다.
	 * @see Container
	 */
	public Container getRoot() {
		return root;
	}

	public Point GlobalLocation() {
		int x = 0, y = 0;
		Child rootChild = root;
		while (rootChild != null && rootChild.getRoot() != null) {
			x += rootChild.getLocation().x;
			y += rootChild.getLocation().y;
			rootChild = rootChild.getRoot();
		}
		return new Point(x, y);
	}

	Child processMouseEvent(MouseEvent e, MouseType mouseType) {
		if (mouseOn == false && contains(e.getPoint())) {
			mouseOn = true;
			processMouseEvent(e, MouseType.Entered);
		} else if (mouseOn == true && !(contains(e.getPoint()))) {
			mouseOn = false;
			e.setSource(this);
			for (EventListener eventListener : eventListeners) {
				if (eventListener instanceof MouseListener)
					((MouseListener) eventListener).mouseExited(e);
			}

		}
		if (mouseOn) {
			e.setSource(this);
			// TODO MouseEvent e의 값을 수정하는 부분 추가하기
			for (EventListener eventListener : eventListeners) {
				switch (mouseType) {
					case Clicked:
						if (eventListener instanceof MouseListener)
							((MouseListener) eventListener).mouseClicked(e);
						break;
					case Entered:
						if (eventListener instanceof MouseListener)
							((MouseListener) eventListener).mouseEntered(e);
						break;
					case Exited:
						if (eventListener instanceof MouseListener)
							((MouseListener) eventListener).mouseExited(e);
						break;
					case Pressed:
						if (eventListener instanceof MouseListener)
							((MouseListener) eventListener).mousePressed(e);
						break;
					case Released:
						if (eventListener instanceof MouseListener)
							((MouseListener) eventListener).mouseReleased(e);
						break;
					case Moved:
						if (eventListener instanceof MouseMotionListener)
							((MouseMotionListener) eventListener).mouseMoved(e);
						break;
					case Dragged:
						if (eventListener instanceof MouseMotionListener)
							((MouseMotionListener) eventListener).mouseDragged(e);
						break;
					case WheelMoved:
						if (eventListener instanceof MouseWheelListener)
							((MouseWheelListener) eventListener)
									.mouseWheelMoved((MouseWheelEvent) e);
						break;
					default:
						break;
				}
			}
			return this;
		} else
			return null;
	}
	
	/**
	 * 좌표를 수정합니다. 좌표를 위한 Point를 새로 생성하지 않기 때문에, 인자로 주어진
	 * Point의 x,y값을 조절하면 이 Child의 좌표도 변경됩니다.
	 * @param location
	 *        새로운 좌표를 어디로 할 것인가에 대한 Point입니다.
	 */
	public void setLocation(Point location) {
		/**
		 * 좌표를 수정합니다.
		 */
		this.location = location;
	}
	
	/**
	 * 주어진 Container안에 이 Child를 넣습니다. Container.draw()가 실행될때
	 * 이 Child의 draw()도 실행됩니다.
	 * @param root
	 *        이 Child가 포함될 Container입니다.
	 */
	public void setRoot(Container root) {
		/**
		 * 주어진 Container안에 이 Child를 넣습니다.
		 */
		this.root = root;
	}
	
	@Override
	public String toString() {
		try {
			return super.toString() + " (root : " + root.toString() + ") (x :" + location.x
					+ ", y :" + location.y + ")";
		} catch (NullPointerException ne) {
			return super.toString() + "(x :" + location.x + ", y :" + location.y + ")";
		}
	}
}
