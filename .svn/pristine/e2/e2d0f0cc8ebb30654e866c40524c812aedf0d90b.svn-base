package com.gmail.sungmin0511a.layoutWitch;

import java.awt.geom.Point2D;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

import com.gmail.sungmin0511a.costume.Location;
import com.gmail.sungmin0511a.drawAbles.Child;
import com.gmail.sungmin0511a.layoutWitch.OceanballWitch.OceanballPosition;

public class OceanballWitch extends LayoutWitch<OceanballPosition> {
	public interface OceanballListener {
		public void arrive();
	}
	
	public class OceanballPosition extends LayoutPosition {
		/**
		 * 
		 */
		private static final long serialVersionUID = 4992260749088228531L;
		boolean arrive;
		int attractive;
		boolean collision;
		OceanballGroup group;
		OceanballListener listener;
		Location location;
		double objectX, objectY;
		double radius;
		double speed;
		double x, y;
		
		/** @param child
		 * @param x
		 * @param y */
		public OceanballPosition(Child child, int x, int y) {
			super(child);
			this.x = objectX = x;
			this.y = objectY = y;
			attractive = 500;
			speed = 1;
			radius = 10;
			child.addCostume(location = new Location(x, y));
			arrive = true;
			collision = true;
			listener = new OceanballListener() {
				@Override
				public void arrive() {
				}
			};
			group = sequence.get(x / sieve, y / sieve);
		}
		
		/** @return the attractive */
		public int getAttractive() {
			return attractive;
		}
		
		/** @return the listener */
		public OceanballListener getListener() {
			return listener;
		}
		
		/** @return the location */
		public Location getLocation() {
			return location;
		}
		
		/** @return the objectX */
		public double getObjectX() {
			return objectX;
		}
		
		/** @return the objectY */
		public double getObjectY() {
			return objectY;
		}
		
		/** @return the radius */
		public double getRadius() {
			return radius;
		}
		
		/** @return the speed */
		public double getSpeed() {
			return speed;
		}
		
		/** @return the x */
		public double getX() {
			return x;
		}
		
		/** @return the y */
		public double getY() {
			return y;
		}
		
		/** @return the arrive */
		public boolean isArrive() {
			return arrive;
		}
		
		/** @return the collision */
		public boolean isCollision() {
			return collision;
		}
		
		public void moveTo(double x, double y) {
			this.objectX = x;
			this.objectY = y;
			arrive = false;
		}
		
		/** @param attractive
		 *        the attractive to set */
		public void setAttractive(int attractive) {
			this.attractive = attractive;
		}
		
		/** @param collision
		 *        the collision to set */
		public void setCollision(boolean collision) {
			this.collision = collision;
		}
		
		/** @param listener
		 *        the listener to set */
		public void setListener(OceanballListener listener) {
			this.listener = listener;
		}
		
		public void setLocation(int x, int y) {
			this.x = x;
			this.y = y;
		}
		
		public void setLocation(double x, double y) {
			this.x = x;
			this.y = y;
		}
		
		/** @param radius
		 *        the radius to set */
		public void setRadius(double radius) {
			this.radius = radius;
		}
		
		/** @param speed
		 *        the speed to set */
		public void setSpeed(double speed) {
			this.speed = speed;
		}
		
		@Override
		protected void post() {
			if (!arrive) {
				double distance = Point2D.distance(x, y, objectX, objectY);
				if (distance > speed) {
					x += speed * (objectX - x) / distance;
					y += speed * (objectY - y) / distance;
					if (collision) {
						list.add(this);
						if (group.index != (int) (y / sieve)
							|| group.root.index != (int) (x / sieve)) {
							group.remove(this);
							group = sequence.get((int) (x / sieve), (int) (y / sieve));
							group.add(this);
						}
					}
				} else {
					x = objectX;
					y = objectY;
					if (Point2D.distance(x, y, location.getX(), location.getY()) < radius) {
						if (listener != null)
							listener.arrive();
						arrive = true;
					}
				}
			}
			location.setX(location.getX() + (this.x - location.getX()) * this.attractive / 1000);
			location.setY(location.getY() + (this.y - location.getY()) * this.attractive / 1000);
		}
	}
	
	enum OceanballType {
		NORMAL, PASS
	}
	
	public final static OceanballType NORMAL = OceanballType.NORMAL;
	public final static OceanballType PASS = OceanballType.PASS;
	private static final long serialVersionUID = -5546573374413757772L;
	// boolean change;
	// Set<PositionPair<OceanballPosition>> list;
	Queue<OceanballPosition> list;
	private OceanballGroupSequence sequence;
	private int sieve;
	
	public OceanballWitch() {
		super();
		sequence = new OceanballGroupSequence();
		list = new LinkedList<OceanballPosition>();
		sieve = 20;
	}
	
	/** @see LayoutWitch#addChild(Child) */
	@Override
	public void addChild(Child child) {
		positions.put(child, new OceanballPosition(child, 0, 0));
	}
	
	/** @see LayoutWitch#addChild(Child, Object) */
	@Override
	public void addChild(Child child, Object option) {
		if (option instanceof OceanballType) {
			OceanballType optionType = (OceanballType) option;
			switch (optionType) {
				case NORMAL:
					addChild(child);
					break;
				case PASS:
					addChild(child);
					((OceanballPosition) (child.getPosition())).setCollision(false);
					break;
				default:
					break;
			}
		}
	}
	
	/** @see com.gmail.sungmin0511a.layoutWitch.LayoutWitch#locate() */
	@Override
	public synchronized void locate() {
		super.locate();
		synchronized (positions) {
			while (list.size() > 0) {
				OceanballPosition position = list.poll();
				Set<OceanballPosition> sets[] = new Set[4];
				/*  이 아래로 대충 50줄쯤 되는 구역은 읽기 토나오니, 간단히 설명하겠다
				 *  한 길이가 sieve크기(여기선 예를들어 100이라고 하자)인
				 *  정사각형 격자맵이 있다고 해보자.
				 *  그러면 OceanballPosition(이하 포지션이라고 서술한다)은 그 격자 안에서
				 *  왼쪽위, 오른쪽 위, 왼쪽 아래, 오른쪽 아래
				 *  중 한 곳에 있을것이다. 예를들어 왼쪽 위에 있다고 해보자. 그러면
				 *  sets[0]은 포지션이 있는 자리
				 *  sets[1]은 포지션이 있는 자리 위쪽
				 *  sets[2]은 포지션이 있는 자리 왼쪽
				 *  sets[3]은 포지션이 있는 자리 왼쪽 위
				 *  의 포지션들을 가져온다
				 *  대충 그렇게 이해하고, for (Set<OceanballPosition> set : sets) 가 있는 줄 까지 스킵 ㄱㄱ
				 */
				sets[0] = position.group.points;
				int index = position.group.index;
				// [0]은 자신이 있는 위치
				if ((position.y % sieve) < sieve / 2) {		// 위쪽인가?
					// [1]은 위쪽
					if (position.group.before != null && position.group.before.index == index - 1) {
						sets[1] = position.group.before.points;
					}
					;
					OceanballGroupRoot root;
					if ((position.x % sieve) < sieve / 2) {	// 왼쪽인가?
						root = position.group.root.before;
					} else {							// 오른쪽인가?
						root = position.group.root.next;
					}
					if (root != null) {
						if (root.contain(index)) {
							// [2]는 바로 옆
							OceanballGroup sideGroup = root.getGroup(index);
							sets[2] = sideGroup.points;
							if (sideGroup.before != null && sideGroup.before.index == index - 1) {
								// [3]은 옆 위쪽
								sets[3] = sideGroup.before.points;
							}
						} else if (root.contain(index - 1)) {
							// [3]은 옆 위쪽
							sets[3] = root.getGroup(index).before.points;
						}
					}
				} else {								// 아래쪽인가?
					// [1]은 아래쪽
					if (position.group.next != null && position.group.next.index == index + 1)
						sets[1] = position.group.next.points;
					;
					OceanballGroupRoot root;
					if ((position.x % sieve) < sieve / 2) {	// 왼쪽인가?
						root = position.group.root.before;
					} else {							// 오른쪽인가?
						root = position.group.root.next;
					}
					if (root != null) {
						if (root.contain(index)) {
							// [2]는 바로 옆
							OceanballGroup sideGroup = root.getGroup(index);
							sets[2] = sideGroup.points;
							if (sideGroup.next != null && sideGroup.next.index == index + 1) {
								// [3]은 옆 아래쪽
								sets[3] = sideGroup.next.points;
							}
						} else if (root.contain(index + 1)) {
							// [3]은 옆 아래쪽
							sets[3] = root.getGroup(index).next.points;
						}
					}
				}
				// System.out.println(sets[0]);
				// System.out.println(sets[1]);
				// System.out.println(sets[2]);
				// System.out.println(sets[3]);
				for (Set<OceanballPosition> set : sets) {
					if (set == null) {
						continue;
					}
					for (OceanballPosition position2 : set) {
						// for (OceanballPosition position2
						// : positions.values()) {
						if (position.equals(position2) || !position.collision
							|| !position2.collision)
							continue;
						double distance = Point2D.distance(position.x, position.y, position2.x,
								position2.y);
						if (distance < position.radius + position2.radius) {
							double x = (position2.x - position.x) / 3;
							double y = (position2.y - position.y) / 3;
							position.x -= x;
							position.y -= y;
							position2.x += x;
							position2.y += y;
							position.arrive = false;
							position2.arrive = false;
							list.add(position);
							list.add(position2);
						}
					}
				}
			}
		}
	}
	
	/** @see LayoutWitch#sortChilds() */
	@Override
	protected void sortChilds() {
	}
	/*
	private OceanballGroup registration(OceanballPosition position, int rootIndex, int groupIndex) {
		OceanballGroupRoot root = group.next(rootIndex);
		if (root == null) {
			OceanballGroupRoot before = group;
			while (before.right.index < rootIndex) {
				before = before.right;
			}
			OceanballGroupRoot result = new OceanballGroupRoot(before);
			result.trunk = new OceanballGroup(null);
			result.trunk.add(position);
			return result.trunk;
		} else {
			OceanballGroup trunk;
			try {
				trunk = root.trunk.next(groupIndex);
			} catch (NullPointerException npe) {
				trunk = null;
			}
			if (trunk == null) {
				OceanballGroup before = root.trunk;
				if (before == null) {
					OceanballGroup result = new OceanballGroup(null);
					root.trunk = result;
					result.add(position);
					return result;
				} else {
					while (before.down.index < groupIndex) {
						before = before.down;
					}
					OceanballGroup result = new OceanballGroup(before);
					result.add(position);
					return result;
				}
			} else {
				trunk.add(position);
				return trunk;
			}
		}
	}
	*/
}

class OceanballGroup {
	static int numbering = 0;
	OceanballGroup before;
	int index;
	OceanballGroup next;
	int num;;
	HashSet points;
	OceanballGroupRoot root;
	
	OceanballGroup(OceanballGroupRoot root, int index) {
		num = numbering++;
		this.root = root;
		this.index = index;
		points = new HashSet();
		if (root.head == null) {
			root.head = root.tail = this;
		} else {
			if (root.head.index > this.index) {
				// GroupRoot의 head보다 index가 작을 경우
				this.next = root.head;
				root.head.before = this;
				root.head = this;
			} else if (root.tail.index < this.index) {
				// GroupRoot의 tail보다 index가 클 경우
				this.before = root.tail;
				root.tail.next = this;
				root.tail = this;
			} else {
				// 중간값일 경우
				OceanballGroup group = root.head;
				while (group.index < index) {
					group = group.next;
				}
				if (group.index != index) {
					this.before = group.before;
					this.next = group;
					group.before.next = this;
					group.before = this;
				}
			}
		}
	}
	
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof OceanballGroup)
			return ((OceanballGroup) obj).index == this.index;
		else
			return super.equals(obj);
	}
	
	@Override
	public String toString() {
		return "Group" + num;
	}
	
	void add(OceanballPosition t) {
		points.add(t);
	}
	
	OceanballGroup get(int index) {
		if (this.index < index) {
			if (next == null)
				return null;
			else
				return next.get(index);
		} else if (this.index == index)
			return this;
		else
			return null;
	}
	
	OceanballGroup next() {
		return next;
	}
	
	void remove() {
		if (before == null && next == null) {
			root.head = root.tail = null;
			root.delete();
		} else {
			if (before != null)
				before.next = this.next;
			else
				root.head = this.next;
			if (next != null)
				next.before = this.before;
			else
				root.tail = this.before;
		}
	}
	
	void remove(OceanballPosition point) {
		points.remove(point);
		if (points.size() == 0) {
			if (before == null && next == null) {
				root.head = root.tail = null;
				root.delete();
			} else {
				if (before != null)
					before.next = this.next;
				else
					root.head = this.next;
				if (next != null)
					next.before = this.before;
				else
					root.tail = this.before;
			}
		}
	}
}

class OceanballGroupRoot {
	OceanballGroupRoot before;
	OceanballGroup head;
	int index;
	OceanballGroupRoot next;
	OceanballGroupSequence sequence;
	OceanballGroup tail;
	
	OceanballGroupRoot(OceanballGroupSequence sequence, int index) {//
		this.index = index;
		this.sequence = sequence;
		if (sequence.tail == null) {
			sequence.head = sequence.tail = this;
		} else {
			if (sequence.head.index > this.index) {
				// Sequence의 head보다 index가 작을 경우
				this.next = sequence.head;
				sequence.head.before = this;
				sequence.head = this;
			} else if (sequence.tail.index < this.index) {
				// Sequence의 tail보다 index가 클 경우
				this.before = sequence.tail;
				sequence.tail.next = this;
				sequence.tail = this;
			} else {
				// 중간값일 경우
				OceanballGroupRoot root = sequence.head;
				while (root.index < index) {
					root = root.next;
				}
				if (root.index != index) {
					this.before = root.before;
					this.next = root;
					if (root.before == null) {
						System.out.println("head" + sequence.head.index);
						System.out.println("tail" + sequence.tail.index);
						System.out.println("root" + root.index);
						System.out.println("this" + index);
					}
					root.before.next = this;
					root.before = this;
				}
			}
		}
	}
	
	boolean contain(int index) {
		if (head == null)
			return false;
		OceanballGroup result = head;
		while (result.index < index) {
			result = result.next();
			if (result == null)
				return false;
		}
		return (result.index == index);
	}
	
	void delete() {//
		if (sequence.head.equals(this) && sequence.tail.equals(this))
			return;
		if (before != null && (before.next != null && before.next.equals(this)))
			before.next = this.next;
		else if (sequence.head.equals(this)) {
			sequence.head = this.next;
		}
		if (next != null && (next.before != null && next.before.equals(this)))
			next.before = this.before;
		else if (sequence.tail.equals(this)) {
			sequence.tail = this.before;
		}
		this.head = null;
		this.tail = null;
	}
	
	OceanballGroupRoot get(int index) {//
		if (this.index == index) {
			return this;
		} else {
			if (index > this.index) {
				if (next != null && next.index <= index)
					return next.get(index);
				else
					return new OceanballGroupRoot(sequence, index);
			} else {
				if (before != null && before.index >= index)
					return before.get(index);
				else
					return new OceanballGroupRoot(sequence, index);
			}
		}
	}
	
	OceanballGroup getGroup(int index) {//
		if (head == null && tail == null)
			return new OceanballGroup(this, index);
		OceanballGroup result = head;
		while (result.index < index) {
			result = result.next();
			if (result == null)
				return new OceanballGroup(this, index);
		}
		if (result.index == index)
			return result;
		else
			return new OceanballGroup(this, index);
	}
}

class OceanballGroupSequence {
	OceanballGroupRoot head;
	OceanballGroupRoot tail;
	
	OceanballGroupSequence() {
		head = new OceanballGroupRoot(this, 0);
		tail = head;
	}
	
	void add(OceanballPosition t, int x, int y) {
		head.get(x).getGroup(y).add(t);
	}
	
	OceanballGroup get(int x, int y) {
		return head.get(x).getGroup(y);
	}
	
	void remove(OceanballPosition t, int x, int y) {
		head.get(x).getGroup(y).remove(t);
	}
}
